

// 位运算符是根据二进制值来进行计算的

let a = 1
let b = 2

// 按位与，如果两个相应的二进制位都为1，则该位的结果值为1，否则为0
// 0 & 0 = 0
// 0 & 1 = 0
// 1 & 0 = 0
// 1 & 1 = 1
console.log(a & b);   // 0
// a = 1   0000 0000 0000 0000 0000 0000 0000 0001
// b = 2   0000 0000 0000 0000 0000 0000 0000 0010  ==> 0000 0000 0000 0000 0000 0000 0000 0000

// 按位或，两个相应的二进制位中只要有一个为1，该位的结果值为1
// 0 | 0 = 0 
// 0 | 1 = 1
// 1 | 0 = 1
// 1 | 1 = 1
console.log(a | b);   // 3
// a = 1   0000 0000 0000 0000 0000 0000 0000 0001
// b = 2   0000 0000 0000 0000 0000 0000 0000 0010  ==> 0000 0000 0000 0000 0000 0000 0000 0011

// 按位取反，是一元运算符，用来对一个二进制数按位取反，即将0变1，将1
console.log(~a);      // -2  
// a = 1   0000 0000 0000 0000 0000 0000 0000 0001  ==> 1111 1111 1111 1111 1111 1111 1111 1110

// 按位异或，若参加运算的两个二进制位值相同则为0，否则为1
console.log(a ^ b);   // 3
// a = 1   0000 0000 0000 0000 0000 0000 0000 0001
// b = 2   0000 0000 0000 0000 0000 0000 0000 0010  ==> 0000 0000 0000 0000 0000 0000 0000 0011


// ~~ 可以实现Math.floor()的部分功能，但是注意区别，当为负数的时候后，Math.floor总是向小的取，而~~相当于先取了绝对值，再加上-号
console.log(~~0, Math.floor(0));          // 0  0
console.log(~~0.1, Math.floor(0.1));      // 0  0
console.log(~~0.9, Math.floor(0.9));      // 0  0
console.log(~~0.9, Math.floor(1));        // 0  1
console.log(~~1.1, Math.floor(1.1));      // 1  1
console.log(~~1.9, Math.floor(1.9));      // 1  1
console.log(~~-1.1, Math.floor(-1.1));    // -1 -2
console.log(~~-1.9, Math.floor(-1.9));    // -1 -2
console.log(~~-1.9, Math.floor(-1));      // -1 -1
console.log(~~-0.9, Math.floor(-0.9));    // 0  -1
console.log(~~-0.1, Math.floor(-0.1));    // 0  -1

// ~~还可以把一个数字组成的字符串转换称为真实的数字，和Number()方法一样
// 区别是~~后面的字符串会先进行Number()类型的隐式转换，再进行~~运算
console.log(~~'123');     // 123
console.log(~~'021');     // 21
console.log(~~'0.1');     // 0
console.log(~~'-1');      // -1
console.log(~~'-1.1');    // -1
console.log(~~'sdf');     // 0
console.log(~~NaN);       // 0

// 异或可以实现两个数交换，而不用引入第三个数
let x = 10
let y = 20
console.log(x, y);  // 10, 20
x ^= y
y ^= x
x ^= y
console.log(x, y);  // 20, 10


// << 左移，各二进位全部右移若干位，正数高位补0，负数高位补1，低位丢弃
console.log(a << 2);   // 4
// a = 1   0000 0000 0000 0000 0000 0000 0000 0001  => 0000 0000 0000 0000 0000 0000 0000 0100


// >> 右移，各二进位全部右移若干位，正数高位补0，负数高位补1，低位丢弃
console.log(5 >> 2);  // 1
// 5       0000 0000 0000 0000 0000 0000 0000 0101  => 0000 0000 0000 0000 0000 0000 0000 0001


// >>> 无符号右移，各二进位全部右移若干位，高位补0，低位丢弃。
console.log(5 >>> 2);   // 1
// 5       0000 0000 0000 0000 0000 0000 0000 0101  => 0000 0000 0000 0000 0000 0000 0000 0001

console.log(-5 >>> 2);  // 1073741822
// -5      1111 1111 1111 1111 1111 1111 1111 1011  => 0011 1111 1111 1111 1111 1111 1111 1110