偏函数

定义函数时，可以给形参设置默认值，从而简化函数的调用，只有与默认值不符的形参才需要传递额外的实参，偏函数也可以简化函数的调用。

可以将某个已有的函数转化为一个新函数，在转换的过程中指定最前面的若干个位置实参以及关键字实参，这样，当调用新函数时，在其内部调用的仍然是转换前的函数，在传递实参时
只需要传递剩余的位置实参和关键字实参就可以了。转换后的函数被称为转换前的函数的偏函数。

借助标准库中的模块functools中的partial(func, *xargs, **kwxargs)，可以将某个已有的函数转换为偏函数。

>>> from functools import partial
>>> 
>>> def f(a, b = 5):
...     return a + b
... 
>>> f_new = partial(f, 2)
>>> 
>>> f_new
functools.partial(<function f at 0x7f37dc75e1e0>, 2)
>>> f_new()
7
>>> 
>>> f_new(8)
10



>>> def f1(*xargs):
...     s = 0
...     for n in xargs:
...         s += n
...     return s
... 
>>> f1_new = partial(f1, 10, 20)
>>> f1_new
functools.partial(<function f1 at 0x7f37dc712d08>, 10, 20)
>>> f1_new(1, 1, 1)
33


>>> def f2(a, b = 3, *xargs, **kwxargs):
...     print('a =',a, 'b =', b, 'xargs =', xargs, 'kwxargs =', kwxargs)
... 
>>> f2_new = partial(f2, 1, 2, 3, m = 9)
>>> f2_new
functools.partial(<function f2 at 0x7f37dc75e0d0>, 1, 2, 3, m=9)
>>> f2_new(4, 5, n = 10)
a = 1 b = 2 xargs = (3, 4, 5) kwxargs = {'m': 9, 'n': 10}
>>> 



>>> def f3(a, b = 2, *, c, **kwxargs):
...     print('a =', a, 'b =', b, 'c =', c, 'kwxargs =', kwxargs)
... 
>>> f3_new = partial(f3, 1, m = 10)
>>> f3_new
functools.partial(<function f3 at 0x7f37dc712d90>, 1, m=10)
>>> f3_new(2, n = 20)                        # c是命名关键字参数
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: f3() missing 1 required keyword-only argument: 'c'
>>> f3_new(2, c = 20)
a = 1 b = 2 c = 20 kwxargs = {'m': 10}
>>> 













